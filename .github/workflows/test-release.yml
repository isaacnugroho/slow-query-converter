name: Test Release Process

on:
  workflow_dispatch:
    inputs:
      test_tag:
        description: 'Test tag name'
        required: true
        default: 'v0.2.0-test'

env:
  CARGO_TERM_COLOR: always

jobs:
  test-build:
    name: Test Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            ext: ''
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            ext: '.exe'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: runner.os != 'Windows'
        run: |
          strip target/${{ matrix.target }}/release/slow-query-converter${{ matrix.ext }}

      - name: Strip binary (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Test-Path "target/${{ matrix.target }}/release/slow-query-converter${{ matrix.ext }}") {
            Write-Host "Binary built successfully, skipping strip on Windows"
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: slow-query-converter-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/slow-query-converter${{ matrix.ext }}

  test-release-prep:
    name: Test Release Preparation
    runs-on: ubuntu-latest
    needs: test-build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create checksums
        run: |
          cd artifacts
          echo "=== Creating Checksums ==="
          for artifact_dir in slow-query-converter-*; do
            if [ -d "$artifact_dir" ]; then
              echo "Processing directory: $artifact_dir"
              
              # Find the binary file (exclude .sha256 files)
              binary_file=$(find "$artifact_dir" -type f ! -name "*.sha256" | head -1)
              echo "Found binary file: $binary_file"
              
              if [ -f "$binary_file" ]; then
                sha256sum "$binary_file" > "$binary_file.sha256"
                echo "‚úÖ Created checksum for: $binary_file"
                echo "Checksum file: $binary_file.sha256"
                
                # Verify the checksum file was created
                if [ -f "$binary_file.sha256" ]; then
                  echo "‚úÖ Checksum file verified"
                  cat "$binary_file.sha256"
                else
                  echo "‚ùå Checksum file not created"
                fi
              else
                echo "‚ùå No binary file found in $artifact_dir"
                echo "Directory contents:"
                ls -la "$artifact_dir"
              fi
            fi
          done

      - name: Debug artifacts
        run: |
          echo "=== Artifacts Structure ==="
          echo "Artifacts directory contents:"
          ls -la artifacts/
          echo ""
          echo "All artifact directories:"
          find artifacts -type d -name "slow-query-converter-*"
          echo ""
          echo "All files in artifact directories:"
          for dir in artifacts/slow-query-converter-*; do
            if [ -d "$dir" ]; then
              echo "Directory: $dir"
              ls -la "$dir"
            fi
          done
          echo ""
          echo "All binary files:"
          find artifacts -type f -name "*slow-query-converter*"
          echo ""
          echo "All files (including .exe):"
          find artifacts -type f
          echo ""
          echo "File sizes:"
          find artifacts -type f -exec ls -la {} \;

      - name: Prepare release files
        run: |
          echo "=== Preparing Release Files ==="
          mkdir -p release-files
          
          for artifact_dir in artifacts/slow-query-converter-*; do
            if [ -d "$artifact_dir" ]; then
              target=$(basename "$artifact_dir")
              echo "Processing artifact directory: $artifact_dir"
              echo "Target name: $target"
              
              # Find the binary file (exclude .sha256 files)
              binary_file=$(find "$artifact_dir" -type f ! -name "*.sha256" | head -1)
              echo "Found binary: $binary_file"
              
              if [ -f "$binary_file" ]; then
                cp "$binary_file" "release-files/${target}"
                echo "‚úÖ Copied: $binary_file -> release-files/${target}"
                
                if [ -f "${binary_file}.sha256" ]; then
                  cp "${binary_file}.sha256" "release-files/${target}.sha256"
                  echo "‚úÖ Copied checksum: ${binary_file}.sha256 -> release-files/${target}.sha256"
                else
                  echo "‚ö†Ô∏è  No checksum file found for $binary_file"
                fi
              else
                echo "‚ùå Warning: No binary found in $artifact_dir"
              fi
            fi
          done
          
          echo ""
          echo "=== Final Release Files ==="
          echo "Release files prepared:"
          ls -la release-files/
          echo ""
          echo "File sizes:"
          du -h release-files/* 2>/dev/null || echo "No files found"
          echo ""
          echo "Checksum files:"
          ls -la release-files/*.sha256 2>/dev/null || echo "No checksum files found"

      - name: Test file validation
        run: |
          echo "=== File Validation Tests ==="
          
          # Check if all expected files exist
          expected_targets=("slow-query-converter-x86_64-unknown-linux-gnu" "slow-query-converter-x86_64-pc-windows-msvc")
          
          for target in "${expected_targets[@]}"; do
            if [ -f "release-files/${target}" ]; then
              echo "‚úÖ Found binary: ${target}"
              file_size=$(stat -c%s "release-files/${target}" 2>/dev/null || echo "unknown")
              echo "   Size: ${file_size} bytes"
            else
              echo "‚ùå Missing binary: ${target}"
            fi
            
            if [ -f "release-files/${target}.sha256" ]; then
              echo "‚úÖ Found checksum: ${target}.sha256"
            else
              echo "‚ùå Missing checksum: ${target}.sha256"
            fi
          done
          
          echo ""
          echo "=== Summary ==="
          total_files=$(find release-files -type f | wc -l)
          echo "Total files in release-files/: ${total_files}"
          
          if [ ${total_files} -gt 0 ]; then
            echo "‚úÖ Test PASSED: Files were successfully prepared"
          else
            echo "‚ùå Test FAILED: No files were prepared"
            exit 1
          fi

      - name: Test release notes generation
        run: |
          echo "=== Testing Release Notes ==="
          echo "Test tag: ${{ github.event.inputs.test_tag }}"
          echo ""
          echo "This would be the release body:"
          echo "## üöÄ MariaDB Slow Query to CSV Converter ${{ github.event.inputs.test_tag }}"
          echo ""
          echo "A high-performance Rust utility to parse MariaDB slow query logs and convert them into clean, multiline CSV format."
          echo ""
          echo "### üì¶ Downloads"
          echo "**Linux (x86_64)**: \`slow-query-converter-x86_64-unknown-linux-gnu\`"
          echo "**Windows (x64)**: \`slow-query-converter-x86_64-pc-windows-msvc.exe\`"
          echo ""
          echo "### üõ†Ô∏è Usage"
          echo "\`\`\`bash"
          echo "# Make executable (Unix)"
          echo "chmod +x slow-query-converter-*"
          echo ""
          echo "# Convert to CSV file"
          echo "./slow-query-converter-* -i slow.log -o output.csv"
          echo ""
          echo "# Output to stdout"
          echo "./slow-query-converter-* -i slow.log"
          echo "\`\`\`"
